defaults:
  - /handlers/image_metrics@validator.handlers
  - /handlers/tqdm_progress@validator.handlers
  - /handlers/default_train@trainer.handlers
  - /engines/sr3_diffusion_infer@tester


trainer:
  run_engine: True
  engine:
    _target_: src.engines.sr3_diffusion.SR3DiffusionTrainingEngine
    max_epochs: 2_000
    data: ${di:datamodule_train_loader}
    denoise_model: ${di:model}
    optimizer:
      _target_: torch.optim.Adam
      lr: 3e-6
      _args_:
        - ${eval:"di['model'].parameters()"}
    conditional: True
    beta_variance_schedule:
      _target_: torch.linspace
      start: 1e-6
      end: 1e-2
      steps: 2_000
    loss_fn:
      _target_: torch.nn.L1Loss
      reduction: mean
  handlers:
    # run validation engine
    train_validator:
      handler: ${eval:"lambda:di['engines.validator'].run()"}
      event:
        - _target_: ignite.engine.events.Events.EPOCH_COMPLETED
          every: 250
        - _target_: ignite.engine.events.Events.COMPLETED
          every: 1
    # init. model weights
    weight_init:
      handler:
        _target_: src.handlers.weight_init.ModelWeightHandler
      kwargs:
        model: ${di:model}
        kind: orthogonal
    # log train images
    log_images:
      handler:
        _target_: src.handlers.log_output_images.LogOutputImages
        tag: train_images
        metric_names: ['x_original', 'y_original', 'y_noisy']
        n_images: 4
        orientation: vertical
      kwargs:
        logger: ${di:"loggers.tensorboard"}
        trigger_event:
          _target_: ignite.engine.events.Events.EPOCH_STARTED
          every: 250
validator:
  run_engine: False
  engine:
    _target_: src.engines.sr3_diffusion.SR3DiffusionInferenceEngine
    max_epochs: ${engines.trainer.engine.max_epochs}
    data: ${di:datamodule_train_loader}
    denoise_model: ${di:model}
    conditional: True
    steps_to_record: [1999, 1500, 1000, 500, 0]
    beta_variance_schedule:
      _target_: torch.linspace
      start: 1e-6
      end: 1e-2
      steps: 2_000
  handlers:
    # validate for only 1 epoch, then pause
    one_epoch:
      handler: ${eval:"lambda e:e.terminate()"}
      event:
        _target_: ignite.engine.events.Events.EPOCH_COMPLETED
        every: 1
      kwargs:
        e: ${di:engines.validator}
    # log valid images
    log_images:
      handler:
        _target_: src.handlers.log_output_images.LogOutputImages
        tag: validation_images
        metric_names: [1999, 1500, 1000, 500, 0, 'lr', 'hr']
        n_images: 4
        orientation: vertical
      kwargs:
        logger: ${di:"loggers.tensorboard"}
        global_step_engine: ${di:"engines.trainer"}

